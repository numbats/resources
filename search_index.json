[["index.html", "Resources for learning R About", " Resources for learning R Nicholas Tierney 2023-04-14 About This page exists to help collate together R resources for the NUMBATs group, to direct students to places to learn more about specific R content. It is not intended as a replacement for courses, but instead a place where people can go to learn more. The core principles for the resources on this page are: Content should be fresh and relevant, rooted in practical example, “why should we care” The way these resources are distributed should be: Accessible, reproducible, extendible Links shared must work Got an idea? Want a resource on a particular area? You can submit an issue You can contribute by editing the rmd directly or forking and making a pull request Ping Nick Tierney on the NUMBATs Slack "],["installing-r.html", "1 Installing R 1.1 Using RStudio projects", " 1 Installing R To get started with R, you need to download and install R, and RStudio. The two guides below provide some good stepwise on getting started with installing R and RStudio. installr guide by Stuart Lee STAT 545’s guide There is also a nice cheatsheet on using Rstudio There are some default options for Rstudio that I recommend setting, which help you improve your reproducibility, and security.(taken from this guide). Tools &gt; Global Options (or Cmd + , on macOS) Under the General tab: For workspace Uncheck restore .RData into workspace at startup Save workspace to .RData on exit : “Never” For History Uncheck “Always save history (even when not saving .RData) Uncheck “Remove duplicate entries in history” Figure 1.1: Setting the options right for RStudio, so you don’t restore previous sessions work, and don’t save it either. This means that you won’t save the objects and other things that you create in your R session and reload them. This is important for two reasons: Reproducibility: you don’t want to have objects from last week cluttering your session Privacy: you don’t want to save private data or other things to your session. You only want to read these in. Your “history” is the commands that you have entered into R. Not saving your history means that you won’t be relying on things that you typed in the last session, which is a good habit to get into! Also it saves R loading up every. single. object. You’ve created - which can add up to a lot over a few months. A colleague of mine once had issues with an RStudio project where it would take many minutes to load up, because it had stored all their data for 6 months worth of statistical analysis. This ended up being more RAM than they had. So, you can even save yourself some speed as well! 1.1 Using RStudio projects I recommend setting up an RStudio project for your work. This helps encapsulate your projects. To learn more about this, see this chapter of Rmarkdown for Scientists. "],["troubleshooting.html", "2 Troubleshooting 2.1 There’s a problem with my R code 2.2 Asking for help 2.3 Package install / library errors", " 2 Troubleshooting To learn R effectively, you need to learn how to get unstuck with R. Remember that everyone, even the experienced R users, still get stuck and stumped. I’ve been programming with R for over 7 years and I regularly come across issues I can’t solve. Sometimes they’re complex, but more often than not, they are simple issues to do with typos, or me not using something correctly. As you get more confidence with using R, you will become faster at becoming unstuck. 2.1 There’s a problem with my R code This post, how to get unstuck with R, teaches a really good process to iterate through when going through the process of getting unstuck. For other problems in R, try following this process: 2.1.1 Phase 1: Typos + Spelling Check for typos. Do you have a spelling mistake? Are you missing an opening or closing bracket? (remember the three types of bracket (), [], {}). Are you missing an opening / closing quote, \" or '? Are you missing a comma? Or have you got an extra one? Did you leave a trailing %&gt;% or + at the end of a line of code? Have you checked for typos again? Check for typos one more time. Restart R Repeat this process until you are sure these aren’t the issue. I have, on several occasions, spent an entire day chasing an error, optimising my R code, doing a lot of work really, and the main issue was a missing comma. 2.1.2 Phase Two: Google is your friend and so is R Copy and paste the error message into google. See what comes up. If that doens’t work, try removing extra detail that might be project specific You can also try RSeek, basically a google search that filters by R related content. If it is related to a specific function, check that I’m using it correctly by reading the helpfile. Write ?FUNCTION into the console, and scroll through to the bottom to look at the examples. Check if you are using the function the right way. Then, read through the helpfile to check the inputs are right. For example, you might be giving a function the wrong input. e.g., mean(1,2,3) vs mean(c(1,2,3)) vs mean(c(\"1\", \"2\", \"3\")). The second one is the correct one, since mean takes a vector as input. 2.1.3 Phase Three: Ask google again Ask google for help again, but this time try to ask about the problem you are solving. “The google formula”: “how to” (your problem/question) “rstats” Examples: You are trying to calculate the mean in R with mean(100, 102, 103), but your answer doens’t make sense. You can google “How to calculate the mean in rstats” lm(Ozone ~ Solar.R) returns: Error in eval(predvars, data, env) : object 'Ozone' not found. In response, google, “Using lm for linear model rstats” and look at the examples they use. 2.1.4 Phase Four: Rubber Duck Try explaining the code to yourself. This is sometimes called “rubber duck debugging”. This is where you place a rubber duck/inanimate object on your computer and explain, carefully, what you are doing. Try explaining the code to a colleague. Like a rubber duck, but they can talk back. Try creating a reproducible example to see if you can recreate the issue you are experiencing. This is really useful because it means that you can transport your problem very efficiently to someone else. Or, if you cannot reproduce the error, then it means there might be another issue, like referring to an object you created in another R session. It takes a bit of practice to create reproducible examples, see the chapter reproducible examples for more detail. 2.2 Asking for help Remember that it is 100% OK and “the norm” to use resources like Stack Overflow, Rstudio community, and other people’s blog posts, to help you solve a problem. If you’re still a bit stuck after trying the process above, that’s OK! I recommend posting a question in these two places (in order of preference): RStudio community - They provide a nice, friendly space to ask questions that don’t necessarily fit into GitHub issues, bug reports, or Stack Overflow. StackOverflow - if you’ve specified a good reproducible example here, there are good chances it will be able to be solved. 2.3 Package install / library errors Sometimes there are errors that appear when you install packages or load them with library. This blog post helps address one of the variants of this error: Error in loadNamespace(name) : there is no package called 'here' Error in library(here) : there is no package called 'here' Warning in install.packages : package ‘emo’ is not available (for R version 3.6.2) "],["reporting-problems-with-your-code.html", "3 Reporting problems with your code 3.1 Some approaches to avoid", " 3 Reporting problems with your code A reproducible example helps you recreate a problem you are experiencing. This is really useful because it means that you can transport your problem very efficiently to someone else. Or, if you cannot reproduce the error, then it means there might be another issue, like referring to an object you created in another R session. You can read more about, reprex: {rep}roducible {ex}amples here: (why reprex): https://reprex.tidyverse.org/articles/articles/magic-reprex.html How to reprex: https://reprex.tidyverse.org/articles/articles/learn-reprex.html It takes a bit of practice to create reproducible examples, I find the following advice useful: Make the problem as small as you can. Is the data 100 rows long? Does it need to be? Can you make it 3 rows long? Make the data transportable. Is your data sensitive? Can you replace the data with some fake numbers/names? 3.1 Some approaches to avoid Taking a screenshot. Just posting the error message. Not sharing the data. "],["rmarkdown.html", "4 Rmarkdown 4.1 What is Rmarkdown? 4.2 Markdown 4.3 Where to learn about Rmarkdown", " 4 Rmarkdown What is R Markdown? from RStudio, Inc. on Vimeo. 4.1 What is Rmarkdown? (Note: content from this section was adapted from rm4sci,with permission from Nick Tierney) rmarkdown provides an environment where you can write your complete analysis, and marries your text, and code together into a rich document. You write your code as code chunks, put your text around that, and then hey presto, you have a document you can reproduce. For example, look at the following report: How did we generate it? --- title: &quot;Exploring gapminder&quot; author: &quot;Nicholas Tierney&quot; output: html_document --- ```{r library, message = FALSE} library(tidyverse) library(broom) ``` ```{r data-read-in, message = FALSE} data &lt;- read_csv(here::here(&quot;data/oz_gapminder.csv&quot;)) ``` # Introduction let&#39;s look at the lifespan ```{r hist-life-exp} hist(data$lifeExp) ``` Let&#39;s fit a simple linear model of the effect of year on life expectancy ```{r example-lm} fit &lt;- lm(lifeExp ~ year, data = data) fit ``` And let&#39;s look at the coefficient table: ```{r coef-table} library(broom) fit_coef &lt;- tidy(fit) knitr::kable(fit_coef, caption = &quot;A table of the coefficients&quot;) ``` The effect of year on life expectancy is `r fit_coef$estimate[2]`. We render this code and it creates this report! It has a plot, it has a table, we even refer to some of the values in the text - the last line of the report looks at the effect of year. But what if the data changes? At the moment we are looking at only Australia - say we get the full dataset, what happens then? Say you’d created your report by hand in microsoft word, and with a graphical user interface software. You would need to: Go back to the GUI, re run the analysis Import the results into Excel Create your graph Copy the graph into Word Copy the results of the coefficients into the text Copy the results of the coefficient table into the text. This is painful. And what if someone wants to know exactly how you did your analysis? This process isn’t exactly sharable. But if you did it in R Markdown? Just update the data, and render the document again, and get an updated document: The results are different! And we just pointed it to some different data. Then re-rendered it. That’s it. 4.2 Markdown In 2004, John Gruber, of daring fireball created Markdown, a simple way to create text that rendered into an HTML webpage. 4.2.1 A brief example of markdown For example, - bullet list - bullet list - bullet list 1. numbered list 2. numbered list 3. numbered list __bold__, **bold**, _italic_, *italic* &gt; quote of something profound ```r # computer code goes in three back ticks 1 + 1 2 + 2 ``` Would be converted to: bullet list bullet list bullet list numbered list numbered list numbered list bold, bold, italic, italic quote of something profound # computer code goes in three back ticks 1 + 1 ## [1] 2 2 + 2 ## [1] 4 With very little marking up, we can create rich text, that actually resembles the text that we want to see. Some other nice features of Markdown include: feature markdown rendered superscript 2^nd^ 2nd subscript CO~2~ CO2 strikethrough ~~mistake~~ mistake links [text](http:://www.example.com/your-link-goes-here) text images ![alternative text](link) ![alternative text](link) 4.3 Where to learn about Rmarkdown Rmarkdown for scientists Provides a guide for rmarkdown targeted at scientists who need to do scientific writing and computing. It covers motivation for using rmarkdown, installation issues, using RStudio, file paths, keyboard shortcuts, inserting figures and tables and how to use captions, references, and other output styles. It is designed with a 3 hour course in mind. Learning markdown R Markdown Cheatsheet Communicating with Data via R Markdown by Emi Tanaka Content from Emi’s COMBINE workshop in 2019 (materials on github here). Communicating with R Markdown workshop by Alison Hill R Markdown: The Definitive Guide The full reference manual to rmarkdown R Markdown Cookbook A more targeted guide to “how to do X in rmarkdown” RStudio’s introduction to rmarkdown Gallery of rmarkdown documents How Alison Hill Teaches Rmarkdown "],["debugging-in-r.html", "5 Debugging in R", " 5 Debugging in R When you are working with functions that you have created yourself, you might encounter an error coming from inside the function. Identifying what the problem (or “bug”) is, can be hard, as you need to “step inside” the function. You can step inside a function by running debugonce(\"function_name\"), in the console. This will allow you to step into the function (“function_name”) and explore the code, line by line, as if you were running an R script interactively. As the name suggests, debugonce will allow you to “debug” exactly “once”. You can also run, debug(\"function_name\"), but you will need to run undebug(\"function_name\") afterwards to turn it off again. Another approach is to place browser inside the function, like so: my_function(x){ browser() x + y } This will allow you to step into the function when my_function is called. Make sure to remember to delete browser() after you are done! This is a very brief description of debugging, to read more on this, see the following resources: https://adv-r.hadley.nz/debugging.html https://jozef.io/r916-exploring-r-code-interactively/ https://rstudio-education.github.io/hopr/debug.html RStudio IDE break-points to track down errors in code, particularly &gt; if you have multiple functions: https://rstudio-education.github.io/hopr/debug.html\\#break-points A video by Miles McBain covering how to approach errors using {recover}, to help track down errors across multiple functions. "],["git-and-version-control.html", "6 git and version control", " 6 git and version control If you write code or plain text (LaTeX, RMarkdown, Markdown, R, c++ or even .txt), you should really consider using git to help manage your workflow. It’s like a supercharged Dropbox. To get started I would recommend 2 things to get started: Read Jenny Bryan’s awesome book, Happy git with R. Download GitKraken, it’s the best free GUI for interacting with git. Some other great resources include: Miles McBain’s git for scientists These slides by Michael Freeman git - the simple guide oh shit, git! I would also really recommend reading an article by Karthik Ram, “Git can facilitate greater reproducibility and increased transparency in science”. "],["shiny.html", "7 shiny 7.1 Introductory", " 7 shiny Shiny is a really awesome way to enhance your R script, package, or method. Shiny turns these into ‘apps’, that people can interact with. You should consider using shiny if you want to create a way for people to interact with their data and produce output like a report or plots. See some more details below on getting started. 7.1 Introductory https://mastering-shiny.org/basic-app.html This section gets you started with the basics of a shiny app This from an in-progress book https://mastering-shiny.org/ by Hadley Wickham, which goes from first steps, to handling issues in putting apps in production. The book is still being written, but is due to be finished by the end of 2020. https://shiny.rstudio.com/tutorial/ Provides a 2 hour video tutorial, with the links below being timestamped sections of the video where it discusses specific concepts Also links to other good tutorials Publishing / deploying shiny apps https://shiny.rstudio.com/deploy/ Debugging shiny https://rstudio.com/resources/shiny-dev-con/debugging-techniques/ https://mastering-shiny.org/action-workflow.html https://shiny.rstudio.com/articles/debugging.html Cheat sheet Past workshops on {shiny}: https://github.com/rstudio-education/intro-shiny-rmarkdown https://github.com/laderast/gradual_shiny https://github.com/jcheng5/rstudio2017-shiny-workshop/tree/master/slides https://github.com/rstudio-education/shiny-sdss18 Many resources found via: https://github.com/mitchelloharawild/shiny-intermediate-workshop "],["visualisation.html", "8 Visualisation 8.1 ggplot2 8.2 plotly", " 8 Visualisation 8.1 ggplot2 If you are going to do a plot in R, you should consider using ggplot2 for most use cases. It takes a short time to get the hang of, and once you’ve got it down you can create plots that make sense, behave how you expect, and look fantastic. ggplot follows a logical syntax adapted from the book “The Grammar of Graphics”. It makes visualisation make sense. And there are lots of other packages that build upon it to make it more awesome, such as GGally, ggalt, ggExtra, ggforce, gganimate, and ggbeeswarm, to name a few! Here are some ggplot resources in order of usefulness The RStudio ggplot cheatsheet sits pinned up above my desk. https://r4ds.had.co.nz/data-visualisation.html https://r4ds.had.co.nz/graphics-for-communication.html The official documentation The R Graphics Cookbook usually has the answers for what I’m after. I also recently discovered the ggplot2 wiki, which has some great case studies and examples. This handout provides an introduction to ggplot. For more detailed explanations on ggplot2, how it works, how to create your own geoms, and more, I’d recommend the official book, and Bob Rudis’ short book on creating ggplot2 extensions 8.2 plotly Plotly for R, written and maintained by Carson Sievert, is a very powerful and flexible interactive plotting engine in R. It has a fully fledged API for writing interactive graphics in R, as well as a fantastic function that gives the user a lot for free: ggplotly. You can read more about plotly for R in Carson’s free and online book. "],["spatial-data.html", "9 Spatial data", " 9 Spatial data Spatial data analysis can be really different to anything else that you’ve done in R. Fortunately, recent awesome progress has been made on the simple features R package, officially supported by the RConsortium, and authored by Edzer Pebesma. The format of simple features is to adopt a standard dataframe format, where every row is a spatial feature, and the spatial features are described in a geometry list column. This is really fantastic, because it means that (for the most part), working with spatial data is very similar to working with regular dataframes, which is the bread and butter of analysis and data wrangling in R. In particular, simple features is designed to play nicely with the tidyverse, and accordingly plays well with ggplot2, dplyr, purrr, and so on. It’s amazing. Here is a list of resources on using spatial data in R: The R Spatial Blog is a great way to stay updated with the latest changes in simple features. A blog post by Matt Strimas-Mackey on how to use simple features with dplyr, tidyr, and ggplot2. Mapping France at night Spatial Pipelines Simple Features Vignettes Using simple features with ggraph A comparison of plotting in sp compared to sf Geocomputation with R (a book) The R Task View on Spatial Data Introduction to GIS with R Steph de Silva-Stammel’s blog post on resources for geospatial data and transport The tmap package provides a great rich way to build static and interactive spatial plots in a layered approach similar to ggplot2 The mapview package provides functions to very quickly and conveniently create interactive visualisations of spatial data. For more thoughts on R for spatial data analysis: Michael Sumner’s overview of R’s spatial capabilities for 2017. For interactive visualisation of spatial data, I really like RStudio’s leaflet, which is a port of the excellent JavaScript leaflet library is my go to place. ggmap, is also great, as it produces static maps. "],["automated-video-making-with-ari.html", "10 Automated video making with ari 10.1 Getting setup with ari 10.2 Helper function for ari 10.3 Troubleshooting ari", " 10 Automated video making with ari Automated R Instructor Ari is an R package that helps you create slides with automatic audio captions. It is developed at Johns Hopkins Data Science Lab, and created by Sean Kross. Here is an example of the kind of video you can make, by Sean Kross: 10.1 Getting setup with ari This is a guide based on the ari README. In order to create an ari video, you need to: Provide an HTML slide deck such as ioslides or xaringan Provide some set of subtitles/script for each slide Either in a separate file, or in each slide Set up an account with Amazon Web Services for AWS Polly (free, as I understand it) see this guide by Sean Kross, but ensure to select Polly related webservices instead of S3 bucket ones as provided in the post. Share your API key with polly (and be sure to NEVER EVER commit this to github) Have ffmpeg installed 10.1.1 Provide an HTML slide deck You need some kind of HTML slide deck. One of the easiest ways to create them is to use Rstudio’s guided process: File &gt; New File &gt; R Markdown &gt; from Template &gt; pick a Xaringan slide deck Or File &gt; New File &gt; R Markdown &gt; Presentation &gt; choose ioslides. For more information see the chapter on slide decks in R. 10.1.2 Provide some set of subtitles/script for each slide Either in a separate file, or in each slide as an HTML comment. If you are going the separate file route: A markdown file with each slide separated by a second level header (##) and then your script text. See file.show(ari_example(\"ari_intro_script.md\")) for an example. An HTML file of slides browseURL(ari_example(\"ari_intro.html\")) If you are going the slides as HTML comment route: Have an Rmarkdown file with HTML comments (&lt;!-- this is an HTML comment --&gt;) that denote the script. See file.show(ari_example(\"ari_comments.Rmd\")) for an example. 10.1.3 Set up an account with Amazon Web Services for AWS Polly This is free, as far as I understand it. To get setup, follow this guide by Sean Kross. But ensure to select Polly related webservices instead of S3 bucket ones as provided in the post. knitr::include_graphics(&quot;figs/aws-screenshot.png&quot;) 10.1.4 Share your API key with polly To share use polly from within R, you need to set some environment variables. What even are “Environment Variables”? They are named values that tell some external application some information. In this case, we are telling AWS our KEY ID and ACCESS KEY, and it uses that information to verify who we are. You can think of it like a username and password. They often look something like this: AWS_ACCESS_KEY_ID=HFepbTd3gnHeL5w3IJFZ SOME_OTHER_API_KEY=VpewOKpQ5Y4ir48R78n2 YET_ANOTHER_API=olAs4e1OX5qP2cD4Kp4U This key here refers to an AWS Access Key ID. This sort of format might sometimes referred to as key-value pairs, the thing on the left is the key, and the thing on the right is that key’s value. E.g., name: Nick - the key is “name”, and it’s value is “Nick”). You can read more on Environment Variables at this medium post and on wikipedia (yes, they are that important that they get their own wiki page!). You can also learn more about how R uses this (and what R does when it boots up) by looking at the helpfile for Startup - ?Startup. 10.1.4.1 Approach one, use Sys.setenv The first is to set the environment variable each time you use ari. To do this, you use Sys.setenv, like so each time you use ari: # First set up your AWS keys # (note this is fake API data) Sys.setenv(&quot;AWS_ACCESS_KEY_ID&quot; = &quot;EA6TDV7ASDE9TL2WI6RJ&quot;, &quot;AWS_SECRET_ACCESS_KEY&quot; = &quot;OSnwITbMzcAwvHfYDEmk10khb3g82j04Wj8Va4AA&quot;, &quot;AWS_DEFAULT_REGION&quot; = &quot;us-east-2&quot;) # Create a video from a Markdown file and slides ari_narrate( ari_example(&quot;ari_intro_script.md&quot;), ari_example(&quot;ari_intro.html&quot;), voice = &quot;Joey&quot; ) Using Sys.setenv will work for each R session. So, if you restart R, you will need to run the Sys.setenv code each time. I prefer to avoid that, since it means I need to record that information somewhere on my computer, which creates extra work each time. To avoid that, I use .Renviron approach described below. 10.1.4.2 Approach two: use .Renviron Another approach is to save these in your personal R evironment - your .Renviron file. This is a special file that you can store these environmental keys. The way this works is that when R starts up, it searches for a .Renviron file (located at fs::path_home(), or within the current folder) and then loads the environment variables there. This all felt a bit mysterious to me the first couple of times I used it - but this process is made simpler with usethis::edit_r_environ() This opens up the .Renviron file, and tells you to restart R for changes to take effect: &gt; usethis::edit_r_environ() ● Modify &#39;/Users/ntie0001/.Renviron&#39; ● Restart R for changes to take effect So you would edit the file and place something like the following in it: AWS_ACCESS_KEY_ID=eim417O8HbM0A21g4uv8 AWS_SECRET_ACCESS_KEY=svIr03835X5tdndEw7c5CRaAOYbSj04rA2p302il AWS_DEFAULT_REGION=ap-southeast-2 Then, follow the instructions from usethis, and Close the opened “.Renviron” file. Restart R 10.1.4.3 A cautionary note on sharing keys. Remember to NEVER EVER commit files containing keys to github. If you notice that you have, you should immediately delete these keys from AWS (or wherever the keys are from), which prevents them from further use. This is important because if someone gets a hold of these keys, the can potentially rack up many hours of time on AWS servers, which in turn could cost you serious $$$. There are bots that trawl through github looking for tokens like this, so it is not so much a case of if this will happen, but when. 10.1.5 Have ffmpeg installed ffmpeg is “A complete, cross-platform solution to record, convert and stream audio and video.” You can download it here. You can check if ffmpeg is installed with ari::ffmpeg_version() 10.1.6 Narrate the video You can create a video with ari_narrate(). For the following directory structure: ari/ - ari-example.Rmd - ari-example.html You would call the following: ari_narrate(script = &quot;ari/ari-example.Rmd&quot;, slides = &quot;ari/ari-example.html&quot;, output = &quot;ari/ari-video-nicole.mp4&quot;, voice = &quot;Nicole&quot;, # voice = &quot;Russell&quot;, subtitles = TRUE, # this needs to be &quot;iterative&quot; or it won&#39;t advance the slides # also each slide needs to have a script or the video will be out # of sync. Including the title slide! capture_method = &quot;iterative&quot;) This would then create: ari/ - ari-example.Rmd - ari-example.html - ari-video-nicole.mp4 - ari-video-nicole.srt You can see an example of the ari slides in “ari-example.Rmd” and “ari-run.R” https://github.com/numbats/resources/tree/master/ari of this GitHub directory. 10.2 Helper function for ari Below is a helper function for ari if you just want to provide a single Rmarkdown file and not specify the HTML as well: ari_narrate_auto &lt;- function(slides, render = TRUE, voice = &quot;Nicole&quot;){ if (render) { rmarkdown::render(input = slides) } ari_narrate(script = slides, slides = xfun::with_ext(slides, &quot;html&quot;), output =xfun::with_ext(slides, &quot;mp4&quot;), voice = voice, subtitles = TRUE, # this needs to be &quot;iterative&quot; or it won&#39;t advance the slides # also each slide needs to have a script or the video will be out # of sync. Including the title slide! capture_method = &quot;iterative&quot;) } Example usage - point it at an Rmd file: ari_narrate_auto(&quot;ari/ari-example.Rmd&quot;) 10.3 Troubleshooting ari Video is crated, but just shows the first slide. Ensure capture_method = \"iterative\" Slides skip / don’t align with script Ensure all slides have a script file, and only one script in HTML comments per slide Warning message like: Warning messages: 1: In pollyHTTP(action = &quot;voices&quot;, verb = &quot;GET&quot;, query = query, ...) : Forbidden (HTTP 403). 2: In structure(out[[&quot;Voices&quot;]], NextToken = out[[&quot;NextToken&quot;]]) : Calling &#39;structure(NULL, *)&#39; is deprecated, as NULL cannot have attributes. Consider &#39;structure(list(), *)&#39; instead. Check that your AWS keys are still valid "],["using-.rprofile-and-.html", "11 Using .Rprofile and .Renviron 11.1 .Rprofile 11.2 .Renviron 11.3 Learning more", " 11 Using .Rprofile and .Renviron Your .Rprofile and .Renviron are special files that R looks for when it opens. You can put certain bits of code in there to customise your R experience - this can be really useful for some things, saving you time. It also comes with two warnings: 1. Be careful, this has the potential to make your work not reproducible if not used carefully. 2. Never ever commit a file containing an API key. Some of the example things that editing your .Rprofile and .Renviron file can do are: Custom start up messages or prompt for R Set up API keys for things like google maps, Amazon Web Services, and GitHub keys Load packages for you Load details for setting up your R package details This section discusses how to use and edit .Rprofile and .Renviron, and the sort of things you can place in them. 11.1 .Rprofile Your R profile file, .Rprofile, contains R code that runs when R starts up. If you do a lot of R package development it might be useful to have this code in your .Rprofile: if (interactive()) { suppressMessages(require(devtools)) } very important - only use packages that you use interactively in this way - you almost certainly don’t want packages like tidyverse and friends here. To edit your R profile, write usethis::edit_r_profile() into the console, and: modify your .Rprofile and save it (ensuring a blank line is left at the end!!!) and Restart R for changes to take place). Example R profiles The R packages book provides a good setup guide for getting started (Setup chapter) Some people share their R profiles online, these types of things are sometimes called, “dotfiles”. For example: Earo Wang Nick Tierney Jim Hester Henrik Bengtsson Dotfiles are a more general concept that apply to things outside of R, so you might see some other languages there as well! 11.2 .Renviron Your R environment file, .Renviron, does not contain R code. It contains environment variables. What even are “Environment Variables”? They are named values that tell some external application some information. For example, we are telling AWS our KEY ID and ACCESS KEY, and it uses that information to verify who we are. You can think of it like a username and password. They often look something like this: AWS_ACCESS_KEY_ID=HFepbTd3gnHeL5w3IJFZ GOOGLE_MAPS_API=VpewOKpQ5Y4ir48R78n2 ANOTHER_API=olAs4e1OX5qP2cD4Kp4U These each refer to an AWS access key id, a google maps API key, and some other API key. This sort of format might sometimes referred to as key-value pairs, the thing on the left is the key, and the thing on the right is that key’s value. E.g., name: Nick - the key is “name”, and it’s value is “Nick”). You can read more on Environment Variables at this medium post and on wikipedia (yes, they are that important that they get their own wiki page!). You can also learn more about how R uses this (and what R does when it boots up) by looking at the helpfile for Startup - ?Startup. 11.2.1 How do I use it? The .Renviron is a special file that you can store these environmental keys. The way this works is that when R starts up, it searches for a .Renviron file (located at fs::path_home(), or within the current folder) and then loads the environment variables there. To use it, edit your .Renviron file with usethis::edit_r_environ() This opens up the .Renviron file, and tells you to restart R for changes to take effect: &gt; usethis::edit_r_environ() ● Modify &#39;/Users/ntie0001/.Renviron&#39; ● Restart R for changes to take effect So you would edit the file and place something like the following in it: AWS_ACCESS_KEY_ID=eim417O8HbM0A21g4uv8 AWS_SECRET_ACCESS_KEY=svIr03835X5tdndEw7c5CRaAOYbSj04rA2p302il AWS_DEFAULT_REGION=ap-southeast-2 Then, follow the instructions from usethis, and: Save the opened “.Renviron” file - ensure that there is a blank line at the end Close the “.Renviron” file. Restart R 11.2.2 Some other use cases of .Renviron Set R flags _R_CHECK_LENGTH_1_LOGIC2_=verbose _R_CHECK_LENGTH_1_CONDITION_=true These avoid potential misuse of logical vector tests (mentioned in https://github.com/MilesMcBain/dflow) Use within a specific project You can set up a .env file in a project to load environment variables - as seen in https://github.com/MilesMcBain/dflow 11.2.3 A cautionary note on sharing keys. Remember to NEVER EVER commit files containing keys to github. If you notice that you have, you should immediately delete these keys from wherever the keys are from to prevents them from further use. Sometimes to get an API key you need to use a credit card - for use if you exceed some set number of computations in a time limit. This means if someone gets a hold of your API keys, it is like they get access to your username and password for something - and they might start running a lot of computations in your good name. It They can potentially rack up many hours of time on, say, AWS servers, which in turn could cost you serious $$$. There are bots that trawl through github looking for tokens like this, and your code will persist even if you commit over them. So if you have accidentally commited an API key, id, or username + password, is not so much a case of if they will get stolen, but when. Consider yourself warned. 11.3 Learning more To learn more about .Rprofile and .Renviron, look at the helpfile for Startup - ?Startup. Setup recommended in R packages Read the usethis page Rstats What they forgot to teach you - chapter 7 Stack overflow: difference between rprofile, renviron Efficient R programming: R Startup Managing R with .Rprofile, .Renviron, Rprofile.site, Renviron.site, rsession.conf, and repos.conf by Alex Gold "],["vectors-and-lists.html", "12 Vectors and Lists 12.1 Vectors 12.2 Lists", " 12 Vectors and Lists 12.1 Vectors Detailed: https://adv-r.hadley.nz/vectors-chap.html 12.2 Lists Detailed: https://adv-r.hadley.nz/vectors-chap.html\\#lists "],["dataframe-vs-a-tibble.html", "13 Dataframe vs a tibble", " 13 Dataframe vs a tibble https://r4ds.had.co.nz/tibbles.html "],["functions.html", "14 Functions", " 14 Functions Detailed: https://adv-r.hadley.nz/functions.html On “functional” programming https://adv-r.hadley.nz/fp.html Using vs creating functions "],["tidying-data.html", "15 Tidying data", " 15 Tidying data 5 examples of long/wide to tidy Anscombe’s quartet (wide to long): https://www.njtierney.com/post/2020/06/01/tidy-anscombe/ 5 example of general tidying "],["slides-and-presentations.html", "16 Slides and Presentations 16.1 Xaringan slides", " 16 Slides and Presentations 16.1 Xaringan slides https://slides.yihui.org/xaringan/\\#1 Enhancing slides: 5 minute video: https://www.youtube.com/watch?v=vZMuu77ocMY&amp;t=2s {xaringanthemer}: https://pkg.garrickadenbuie.com/xaringanthemer/ {xaringanExtra}: &gt; https://pkg.garrickadenbuie.com/xaringanExtra/ "],["flexdashboard.html", "17 Flexdashboard 17.1 Creating your first flexdashboard 17.2 Sharing your dashboard online 17.3 Deploying flexdashboard online", " 17 Flexdashboard Flexdashboard - https://rmarkdown.rstudio.com/flexdashboard/ 17.1 Creating your first flexdashboard Embed Stuart’s video 17.2 Sharing your dashboard online How do you share your flexdashboard with others? Here are a few approaches to that 17.3 Deploying flexdashboard online 17.3.1 Sharing via RStudio Connect / RPubs 17.3.2 Netlify Drag ‘n’ Drop This is a 5 minute video created by Nick Tierney for ETC1010. This runs through in real time (&lt;5 minutes) how to use netlify’s drag and drop using flexdashboard as an example. This results in this link: https://dmac-example-flex.netlify.app/ "],["setting-up-a-kaggle-competition.html", "18 Setting up a kaggle competition", " 18 Setting up a kaggle competition A kaggle competition is easy to set up to create a class assignment where the students can objectively test their modeling skills. A learnr tutorial created by Di Cook can be found at https://ebsmonash.shinyapps.io/kaggle_instructions "],["learning-more-1.html", "19 Learning more 19.1 Statistics / Data Science / Forecasting 19.2 R Programming 19.3 Other resources for learning more about R 19.4 Keeping up with R", " 19 Learning more R is a big world that attracts people from all sorts of different disciplines. Below is a list of free online resources and textbooks for learning about R, and R’s application in other areas. 19.1 Statistics / Data Science / Forecasting R for Data Science From wrangling data to visualisation, wrangling dates and strings, and writing. Written by Garrett Grolemund and Hadley Wickham. Forecasting Principles and Practice Forecasting using R, written by Rob Hyndman and George Athanasopolous. From the philosophy of forecasting, to time series graphics, methods on ARIMA, calculating features, and time series decomposition. Modern Dive: Statistical inference vis data science Written by Chester Ismay and Albert Kim, covers data wrangling, regression, bootstrapping, and inference, using the infer package Introduction to Statistical Learning Free PDF to download. Excellent introduction into concepts on linear regression, classification, cross validation, decision trees, and more. 19.2 R Programming Advanced R Covers deeper details on how R works R Packages This book tells you how to write an R package, from the mechanics of getting started, when and why to write and R package, and how to do it well. Written by Hadley Wickham and Jenny Bryan. Efficient R Programming. Written by Colin Gillespie and Robin Lovelace, this looks at using R from a purely efficient perspective. So, how to install and update R with the least fuss for the most gain, how to use R so it is fast, how to optimise your code efficiently, as well as topics like parallel computing and how to collaborate with others. 19.3 Other resources for learning more about R Big Book of R by Oscar Baruffa, “the only [R] bookmark you’ll need in the future”. Contains many similar topics to this resource book, but with a very wide scope. STAT 545 - Data wrangling, exploration, and analysis with R by Jenny Bryan and the STAT 545 TAs. This book came from the STAT 545 book delivered at UBC, it covers topics from installing R to version control, writing, data manipulation, dates, joins, writing functions, visualisation, package writing, automation, web scraping, and using shiny. 19.4 Keeping up with R Read R-Weekly Read R Bloggers Maëlle Salmon’s approach to keeping up with R Nick Tierney’s approach to keeping up with R Explore the #rstats hashtag on twitter. The R community on twitter is both excellent and friendly. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
